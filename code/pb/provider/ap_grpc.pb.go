// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package provider

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccessPointClient is the client API for AccessPoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessPointClient interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*BeginSession, error)
}

type accessPointClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessPointClient(cc grpc.ClientConnInterface) AccessPointClient {
	return &accessPointClient{cc}
}

func (c *accessPointClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*BeginSession, error) {
	out := new(BeginSession)
	err := c.cc.Invoke(ctx, "/zchain.pb.provider.AccessPoint/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessPointServer is the server API for AccessPoint service.
// All implementations must embed UnimplementedAccessPointServer
// for forward compatibility
type AccessPointServer interface {
	Connect(context.Context, *ConnectRequest) (*BeginSession, error)
	mustEmbedUnimplementedAccessPointServer()
}

// UnimplementedAccessPointServer must be embedded to have forward compatible implementations.
type UnimplementedAccessPointServer struct {
}

func (UnimplementedAccessPointServer) Connect(context.Context, *ConnectRequest) (*BeginSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedAccessPointServer) mustEmbedUnimplementedAccessPointServer() {}

// UnsafeAccessPointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessPointServer will
// result in compilation errors.
type UnsafeAccessPointServer interface {
	mustEmbedUnimplementedAccessPointServer()
}

func RegisterAccessPointServer(s grpc.ServiceRegistrar, srv AccessPointServer) {
	s.RegisterService(&AccessPoint_ServiceDesc, srv)
}

func _AccessPoint_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessPointServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zchain.pb.provider.AccessPoint/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessPointServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessPoint_ServiceDesc is the grpc.ServiceDesc for AccessPoint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessPoint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zchain.pb.provider.AccessPoint",
	HandlerType: (*AccessPointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _AccessPoint_Connect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/provider/proto/ap.proto",
}
