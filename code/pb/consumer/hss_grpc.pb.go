// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package consumer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HSSClient is the client API for HSS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HSSClient interface {
	VerifyUser(ctx context.Context, in *VerifyUserRequest, opts ...grpc.CallOption) (*VerifyUserResponse, error)
}

type hSSClient struct {
	cc grpc.ClientConnInterface
}

func NewHSSClient(cc grpc.ClientConnInterface) HSSClient {
	return &hSSClient{cc}
}

func (c *hSSClient) VerifyUser(ctx context.Context, in *VerifyUserRequest, opts ...grpc.CallOption) (*VerifyUserResponse, error) {
	out := new(VerifyUserResponse)
	err := c.cc.Invoke(ctx, "/zchain.pb.consumer.HSS/VerifyUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HSSServer is the server API for HSS service.
// All implementations must embed UnimplementedHSSServer
// for forward compatibility
type HSSServer interface {
	VerifyUser(context.Context, *VerifyUserRequest) (*VerifyUserResponse, error)
	mustEmbedUnimplementedHSSServer()
}

// UnimplementedHSSServer must be embedded to have forward compatible implementations.
type UnimplementedHSSServer struct {
}

func (UnimplementedHSSServer) VerifyUser(context.Context, *VerifyUserRequest) (*VerifyUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUser not implemented")
}
func (UnimplementedHSSServer) mustEmbedUnimplementedHSSServer() {}

// UnsafeHSSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HSSServer will
// result in compilation errors.
type UnsafeHSSServer interface {
	mustEmbedUnimplementedHSSServer()
}

func RegisterHSSServer(s grpc.ServiceRegistrar, srv HSSServer) {
	s.RegisterService(&HSS_ServiceDesc, srv)
}

func _HSS_VerifyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HSSServer).VerifyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zchain.pb.consumer.HSS/VerifyUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HSSServer).VerifyUser(ctx, req.(*VerifyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HSS_ServiceDesc is the grpc.ServiceDesc for HSS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HSS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zchain.pb.consumer.HSS",
	HandlerType: (*HSSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyUser",
			Handler:    _HSS_VerifyUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/consumer/proto/hss.proto",
}
